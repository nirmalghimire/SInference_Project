summary(mydata)
ls(mydata)
head(mydata)
#B.	Calculating Sample Mean and Theoretical Mean Using Simulated Data
#mean of simulated data per row
SMean<-rowMeans(mydata)
#Checking if tha worked
SMean
#Checking if tha worked
summary(SMean)
#Single mean of all row means
MeanOfMean<-mean(SMean)
#Printing the Simulated Mean
MeanOfMean
#Calculating Theoretical Mean
theoreticalMean<-1/lambda
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(MeanOfMean)
#printing the sample variance
sampleVar
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(MeanOfMean)
#printing the sample variance
sampleVar
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(MeanOfMean)
#printing the sample variance
sampleVar
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
var(MeanOfMean)
#Printing the Simulated Mean
MeanOfMean
#Calculating Theoretical Mean
theoreticalMean<-1/lambda
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(MeanOfMean)
#printing the sample variance
sampleVar
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(SMean)
#printing the sample variance
sampleVar
#Calculating the theoretical variance
theoreticalVar<-(1/lambda)^2/(n)
#Printing the theoretical variance
theoreticalVar
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(SMean)
#printing the sample variance
sampleVar
#Calculating the theoretical variance
theoreticalVar<-(1/lambda)^2/(n)
#Printing the theoretical variance
theoreticalVar
#Part 1:Simulation
#invoking required libraries for data visualization
library(ggplot2)
library(dplyr)
#setting seed for generating data
set.seed(-123)
#setting up 40 exponential
n<-40
#setting lambda to 0.2 for all simulations
lambda<- 0.2
#Need 1000 simulations
S<-1000
#setting z value for 95% confidence interval (CI)
z<-1.96
#A.	Simulating data in R and calculating means
#Creating dataframe with 40 columns and 1000 exponential simulations
mydata<-matrix(rexp(n*S,lambda),nrow=S)
#Checking if the data frame is created
summary(mydata)
#B.	Calculating Sample Mean and Theoretical Mean Using Simulated Data
#mean of simulated data per row
SMean<-rowMeans(mydata)
#Checking if tha worked
summary(SMean)
#Single mean of all row means
MeanOfMean<-mean(SMean)
#Printing the Simulated Mean
MeanOfMean
#Calculating Theoretical Mean
theoreticalMean<-1/lambda
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(SMean)
#printing the sample variance
sampleVar
#Calculating the theoretical variance
theoreticalVar<-(1/lambda)^2/(n)
#Printing the theoretical variance
theoreticalVar
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot()
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot(matrix(y=SMean),aes(x=y))+
geom_histogram(aes(y=..Density..), binwidth = 0.2, fill="lightblue",
color="red")+
stat_function(fun=dnorm,arg=list(mean=lambda^-1,
sd=(lambda*sqrt(n))^-1),
size=2)+
labs(title="Plot of Simulation Data", x="Mean per Row")
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot(matrix(y="SMean"),aes(x=y))+
geom_histogram(aes(y=..Density..), binwidth = 0.2, fill="lightblue",
color="red")+
stat_function(fun=dnorm,arg=list(mean=lambda^-1,
sd=(lambda*sqrt(n))^-1),
size=2)+
labs(title="Plot of Simulation Data", x="Mean per Row")
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot(SMean,aes(x=y))+
geom_histogram(aes(y=..Density..), binwidth = 0.2, fill="lightblue",
color="red")+
stat_function(fun=dnorm,arg=list(mean=lambda^-1,
sd=(lambda*sqrt(n))^-1),
size=2)+
labs(title="Plot of Simulation Data", x="Mean per Row")
g<-ggplot(data.frame(SMean,aes(x=y))+
g<-ggplot(data.frame(SMean,aes(x=y))+
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot(data.frame(SMean,aes(x=y))+
color="red")+
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot(matrix(SMean,aes(x=y))+
g<-ggplot(matrix(SMean,aes(x=y))+
geom_histogram(aes(y=..Density..), binwidth = 0.2, fill="lightblue",
colour="red")+
stat_function(fun=dnorm,arg=list(mean=lambda^-1,
sd=(lambda*sqrt(n))^-1),
size=2)+
labs(title="Plot of Simulation Data", x="Mean per Row")
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
g<-ggplot(data.frame(SMean,aes(x=y)))+
geom_histogram(aes(y=..Frequency..), binwidth = 0.2, fill="lightblue",
colour="red")+
stat_function(fun=dnorm,arg=list(mean=lambda^-1,
sd=(lambda*sqrt(n))^-1),
size=2)+
labs(title="Plot of Simulation Data", x="Mean per Row")
g<-ggplot(data.frame(SMean,aes(x=y)))+
geom_histogram(aes(y=..Frequency..), binwidth = 0.2, fill="lightblue",
colour="red")+
stat_function(fun=dnorm, arg=list(mean=lambda^-1,
sd=(lambda*sqrt(n))^-1),
size=2)+
labs(title="Plot of Simulation Data", x="Mean per Row")
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Plot SMeans
g<-ggplot(SMeans,aes(x=SMeans,y=..Frequency..))
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-Smean/sqrtn
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-SMean/sqrt n
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-SMean/sqrt(n)
serror
#Plot SMeans
g<-ggplot(SMeans,aes(x=SMeans,y=..Frequency..))
#Plot SMeans
g<-ggplot(SMean,aes(x=SMeans,y=..Frequency..))
#Plot SMeans
g<-ggplot(SMean,aes(x=SMean,y=..Frequency..))
#Plot SMeans
g<-ggplot(SMean,aes(x=SMean,y=..Frequency..))
#Plot SMeans
g<-ggplot(matrix(SMean,aes(x=SMean,y=..Frequency..)))
#Plot SMeans
g<-ggplot(data.frame(SMean,aes(x=SMean,y=..Frequency..)))
#Plot SMeans
g<-ggplot(SMean,aes(x=SMean,y=..Frequency..))
#Part 1:Simulation
#invoking required libraries for data visualization
library(ggplot2)
library(dplyr)
#setting seed for generating data
set.seed(-123)
#setting up 40 exponential
n<-40
#setting lambda to 0.2 for all simulations
lambda<- 0.2
#Need 1000 simulations
S<-1000
#setting z value for 95% confidence interval (CI)
z<-1.96
#A.	Simulating data in R and calculating means
#Creating dataframe with 40 columns and 1000 exponential simulations
mydata<-matrix(rexp(n*S,lambda),nrow=S)
#Checking if the data frame is created
summary(mydata)
#B.	Calculating Sample Mean and Theoretical Mean Using Simulated Data
#mean of simulated data per row
Row_Mean<-rowMeans(mydata)
#Checking if tha worked
summary(Row_Mean)
#Single mean of all row means
MeanOfMean<-mean(SMean)
#Printing the Simulated Mean
MeanOfMean
#Calculating Theoretical Mean
theoreticalMean<-1/lambda
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(Row_Mean)
#printing the sample variance
sampleVar
#Calculating the theoretical variance
theoreticalVar<-(1/lambda)^2/(n)
#Printing the theoretical variance
theoreticalVar
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-Row_Mean/sqrt(n)
#Plot SMeans
g<-ggplot(Row_Mean,aes(x=Row_Mean,y=..Frequency..))
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-Row_Mean/sqrt(n)
#creating a standard function F
F<-function(f){
round((f-Row_Mean)/serror,2)
}
F
#Plot Row_Mean
normalizedMeans<-apply(Row_Mean,1,FUN=F)
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-MeanOfMean/sqrt(n)
#creating a standard function F
F<-function(f){
round((f-MeanOfMean)/serror,2)
}
#Plot Row_Mean
normalizedMeans<-apply(MeanOfMean,1,FUN=F)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean,1,FUN=F)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean [,2],1,FUN=F)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean [,1],1,FUN=F)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean [,1],FUN=F)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean[,1,drop=F],FUN=F)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean,FUN=F)
normalizedMeans
(Row_Mean,aes(x=Row_Mean,y=..Frequency..))
g<-ggplot(Row_Mean,aes(x=MeanOfMean,y=..Frequency..))
#Part 1:Simulation
#invoking required libraries for data visualization
library(ggplot2)
library(dplyr)
#setting seed for generating data
set.seed(-123)
#setting up 40 exponential
n<-40
#setting lambda to 0.2 for all simulations
lambda<- 0.2
#Need 1000 simulations
S<-1000
#setting z value for 95% confidence interval (CI)
z<-1.96
#A.	Simulating data in R and calculating means
#Creating dataframe with 40 columns and 1000 exponential simulations
mydata<-matrix(rexp(n*S,lambda),nrow=S)
#Checking if the data frame is created
summary(mydata)
#B.	Calculating Sample Mean and Theoretical Mean Using Simulated Data
#mean of simulated data per row
Row_Mean<-rowMeans(mydata)
#Checking if tha worked
summary(Row_Mean)
#Single mean of all row means
MeanOfMean<-mean(SMean)
#Printing the Simulated Mean
MeanOfMean
#Calculating Theoretical Mean
theoreticalMean<-1/lambda
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(Row_Mean)
#printing the sample variance
sampleVar
#Calculating the theoretical variance
theoreticalVar<-(1/lambda)^2/(n)
#Printing the theoretical variance
theoreticalVar
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
#Calculating standard error.
serror<-MeanOfMean/sqrt(n)
#creating a standard function F
F<-function(f){
round((f-MeanOfMean)/serror,2)
}
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean,FUN=F)
g<-ggplot()+
geom_histogram(aes(x=normalizedMeans, y=..Frequency..),
bins=40,
color="red",
fill='lightblue'
)+
labs(
title='Comparing the Standardized Sample Means and the Standardized Standard Normal',
xlab='Mean',
ylab='Frequency'
)+
geom_vline(
xintercept=MeanOfMean-(1/lambda),
color="orange",
linetype='dashed',
size=1
)+
geom_vline(
xintercept = 0,
color="cholcolate",
size=0.5
)+
stat_function(
aes(x=normalizedMeans),
size=2,
fun=dnorm,
args=list(
mean=0,
sd=1
)
)+
stat_function(
aes(x=normalizedMeans),
size=1,
color='blue',
linetype='dashed',
fun=dnorm,
args=list(
mean=mean(normalizedMeans),
sd=sd(normalizedMeans)
)
)
print(g)
#Plot Row_Mean
normalizedMeans<-lapply(MeanOfMean,FUN=F)
g<-ggplot()+
geom_histogram(aes(x=normalizedMeans, y=..Frequency..),
bins=40,
color="red",
fill='lightblue'
)+
labs(
title='Comparing the Standardized Sample Means and the Standardized Standard Normal',
xlab='Mean',
ylab='Frequency'
)+
geom_vline(
xintercept=MeanOfMean-(1/lambda),
color="orange",
linetype='dashed',
size=1
)+
geom_vline(
xintercept = 0,
color="cholcolate",
size=0.5
)+
stat_function(
aes(x=normalizedMeans),
size=2,
fun=dnorm,
args=list(
mean=0,
sd=1
)
)+
stat_function(
aes(x=normalizedMeans),
size=1,
color='blue',
linetype='dashed',
fun=dnorm,
args=list(
mean=mean(normalizedMeans),
sd=sd(normalizedMeans)
)
)
g<-ggplot()+
geom_histogram(aes(x=normalizedMeans, y=..density..),
bins=40,
color="red",
fill='lightblue'
)+
labs(
title='Comparing the Standardized Sample Means and the Standardized Standard Normal',
xlab='Mean',
ylab='Frequency'
)+
geom_vline(
xintercept=MeanOfMean-(1/lambda),
color="orange",
linetype='dashed',
size=1
)+
geom_vline(
xintercept = 0,
color="cholcolate",
size=0.5
)+
stat_function(
aes(x=normalizedMeans),
size=2,
fun=dnorm,
args=list(
mean=0,
sd=1
)
)+
stat_function(
aes(x=normalizedMeans),
size=1,
color='blue',
linetype='dashed',
fun=dnorm,
args=list(
mean=mean(normalizedMeans),
sd=sd(normalizedMeans)
)
)
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
hist(SMean)
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
hist(SMean,
main="Histogram of Sample Data Distribution",
xlab="Mean",
xlim=c(2,8),
col="darkmagenta",
freq=FALSE
)
#Part 1:Simulation
#setting seed for generating data
set.seed(-123)
#setting up 40 exponential
n<-40
#setting lambda to 0.2 for all simulations
lambda<- 0.2
#Need 1000 simulations
S<-1000
#setting z value for 95% confidence interval (CI)
z<-1.96
#A.	Simulating data in R and calculating means
#Creating dataframe with 40 columns and 1000 exponential simulations
mydata<-matrix(rexp(n*S,lambda),nrow=S)
#Checking if the data frame is created
summary(mydata)
#B.	Calculating Sample Mean and Theoretical Mean Using Simulated Data
#mean of simulated data per row
Row_Mean<-rowMeans(mydata)
#Checking if tha worked
summary(Row_Mean)
#Single mean of all row means
MeanOfMean<-mean(SMean)
#Printing the Simulated Mean
MeanOfMean
#Calculating Theoretical Mean
theoreticalMean<-1/lambda
# Printing the Theoretical Mean
theoreticalMean
#C.	Calculating Sample Variance and Theoretical Variance Using Simulated Data
sampleVar<-var(Row_Mean)
#printing the sample variance
sampleVar
#Calculating the theoretical variance
theoreticalVar<-(1/lambda)^2/(n)
#Printing the theoretical variance
theoreticalVar
#D.	Checking Data Distribution and Assessing if they are Approximately Normal
#Histogram of the sample mean
hist(SMean,
main="Histogram of Sample Data Distribution",
xlab="Mean",
xlim=c(2,8),
col="darkmagenta",
freq=FALSE
)
